"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisClient = void 0;
const ioredis_1 = __importDefault(require("ioredis"));
class RedisClient {
    constructor() {
        if (!RedisClient.instance) {
            RedisClient.instance = new ioredis_1.default({
                host: 'redis', // Replace with your Redis server host
                port: 6379, // Replace with your Redis server port
                // Add other Redis options if needed
            });
            // Optional: Add event listeners for connection events
            RedisClient.instance.on('connect', () => {
                console.log('Connected to Redis');
            });
            RedisClient.instance.on('error', (err) => {
                console.error('Redis error:', err);
            });
        }
    }
    static getInstance() {
        if (!RedisClient.instance) {
            new RedisClient();
        }
        return RedisClient.instance;
    }
    // Set a key-value pair in Redis with optional expiration time in seconds
    static set(key, value, expireInSeconds) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const serializedValue = typeof value === 'object'
                    ? JSON.stringify(value)
                    : value;
                const result = expireInSeconds
                    ? yield RedisClient.instance.set(key, serializedValue, 'EX', expireInSeconds)
                    : yield RedisClient.instance.set(key, serializedValue);
                console.log(`Set key "${key}" with value "${serializedValue}"`);
                if (expireInSeconds) {
                    console.log(`Key "${key}" will expire in ${expireInSeconds} seconds`);
                }
                return result;
            }
            catch (err) {
                console.error('Error setting key in Redis:', err);
                throw err;
            }
        });
    }
    // Get a value by key from Redis
    static get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const value = yield RedisClient.instance.get(key);
                console.log(`Get key "${key}" returned value "${value}"`);
                if (value) {
                    try {
                        const parsedValue = JSON.parse(value);
                        console.log(`Get key "${key}" returned a parsed value:`, parsedValue);
                        return parsedValue;
                    }
                    catch (_a) {
                        console.log(`Get key "${key}" returned a raw value:`, value);
                        return value;
                    }
                }
                return null;
            }
            catch (err) {
                console.error('Error getting key from Redis:', err);
                throw err;
            }
        });
    }
    // Delete a key from Redis
    static delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield RedisClient.instance.del(key);
                console.log(`Deleted key "${key}" from Redis`);
                return result;
            }
            catch (err) {
                console.error('Error deleting key in Redis:', err);
                throw err;
            }
        });
    }
    // Check if a key exists in Redis
    static exists(key) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield RedisClient.instance.exists(key);
                console.log(`Key "${key}" exists: ${result === 1}`);
                return result === 1;
            }
            catch (err) {
                console.error('Error checking existence of key in Redis:', err);
                throw err;
            }
        });
    }
    // Set an expiration time on a key
    static expire(key, seconds) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield RedisClient.instance.expire(key, seconds);
                console.log(`Set expiration for key "${key}" to ${seconds} seconds`);
                return result === 1;
            }
            catch (err) {
                console.error('Error setting expiration for key in Redis:', err);
                throw err;
            }
        });
    }
    // Get the remaining time to live of a key
    static ttl(key) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield RedisClient.instance.ttl(key);
                console.log(`Time to live for key "${key}" is ${result} seconds`);
                return result;
            }
            catch (err) {
                console.error('Error getting TTL for key in Redis:', err);
                throw err;
            }
        });
    }
}
exports.RedisClient = RedisClient;
// const redisClient = new RedisClient();
// module.exports = redisClient;
// export default RedisClient;
