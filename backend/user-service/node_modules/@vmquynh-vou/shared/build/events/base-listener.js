"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = void 0;
class Listener {
    constructor(connection) {
        this.connection = connection;
    }
    setupChannel(exchangeType) {
        return __awaiter(this, void 0, void 0, function* () {
            this.channel = yield this.connection.createChannel();
            yield this.channel.assertExchange(this.exchange, exchangeType, { durable: true });
            yield this.channel.assertQueue(this.queue, { durable: true });
            yield this.channel.bindQueue(this.queue, this.exchange, this.routingKey); // Binding Queue vá»›i Routing Key
            // this.channel.prefetch(1);
        });
    }
    listen() {
        return __awaiter(this, arguments, void 0, function* (exchangeType = 'direct') {
            yield this.setupChannel(exchangeType);
            this.channel.consume(this.queue, (msg) => {
                if (msg) {
                    console.log(`Message received: ${this.routingKey} / ${this.queue}`);
                    const parsedData = this.parseMessage(msg);
                    this.onMessage(parsedData, msg);
                }
            }, { noAck: false });
        });
    }
    parseMessage(msg) {
        const data = msg.content;
        return typeof data === 'string'
            ? JSON.parse(data)
            : JSON.parse(data.toString('utf8'));
    }
}
exports.Listener = Listener;
