import { Channel, Connection, ConsumeMessage } from 'amqplib';
import { RoutingKey } from './routing-key';
interface Event {
    exchange: string;
    routingKey: RoutingKey;
    data: any;
}
export declare abstract class Listener<T extends Event> {
    abstract exchange: string;
    abstract routingKey: T['routingKey'];
    abstract queue: string;
    abstract onMessage(data: T['data'], msg: ConsumeMessage): void;
    protected channel: Channel;
    protected connection: Connection;
    constructor(connection: Connection);
    setupChannel(exchangeType: string): Promise<void>;
    listen(exchangeType?: string): Promise<void>;
    parseMessage(msg: ConsumeMessage): any;
}
export {};
