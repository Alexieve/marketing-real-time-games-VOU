"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const amqplib_1 = __importDefault(require("amqplib"));
class RabbitMQ {
    constructor(exchange) {
        this.connection = null;
        this.channel = null;
        this.exchange = exchange;
    }
    static getInstance(exchange) {
        if (!RabbitMQ.instances[exchange]) {
            RabbitMQ.instances[exchange] = new RabbitMQ(exchange);
        }
        return RabbitMQ.instances[exchange];
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.connection) {
                    this.connection = yield amqplib_1.default.connect('amqp://rabbitmq');
                    this.channel = yield this.connection.createChannel();
                    console.log('[o] Connected to RabbitMQ');
                    yield this.channel.assertExchange(this.exchange, 'topic', { durable: true });
                }
            }
            catch (error) {
                yield new Promise(resolve => setTimeout(resolve, 5000));
                return this.connect();
            }
        });
    }
    publish(exchange, routingKey, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.channel) {
                const msgBuffer = Buffer.from(JSON.stringify(msg));
                this.channel.publish(exchange, routingKey, msgBuffer, { persistent: true });
                console.log(`[>>] Published message to exchange: [${exchange}] with routingKey: [${routingKey}]`);
            }
        });
    }
    requestReply(exchange, routingKey, msg) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.channel) {
                const msgBuffer = Buffer.from(JSON.stringify(msg));
                const { queue: replyQueue } = yield this.channel.assertQueue('', { exclusive: true });
                const correlationId = this.generateUuid();
                this.channel.publish(exchange, routingKey, msgBuffer, {
                    replyTo: replyQueue,
                    correlationId: correlationId,
                    persistent: true
                });
                return new Promise((resolve, reject) => {
                    var _a;
                    (_a = this.channel) === null || _a === void 0 ? void 0 : _a.consume(replyQueue, (msg) => {
                        var _a;
                        if ((msg === null || msg === void 0 ? void 0 : msg.properties.correlationId) === correlationId) {
                            resolve(JSON.parse(msg.content.toString()));
                            (_a = this.channel) === null || _a === void 0 ? void 0 : _a.ack(msg);
                        }
                    }, { noAck: false });
                });
            }
        });
    }
    consume(queue, bindingKey, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.channel) {
                yield this.channel.assertQueue(queue, { durable: true });
                console.log(`[...] Waiting for messages in queue: ${queue}, binding to key: ${bindingKey}`);
                yield this.channel.bindQueue(queue, this.exchange, bindingKey);
                this.channel.consume(queue, (msg) => {
                    var _a;
                    if (msg !== null) {
                        const messageContent = JSON.parse(msg.content.toString());
                        callback(messageContent);
                        (_a = this.channel) === null || _a === void 0 ? void 0 : _a.ack(msg);
                    }
                }, { noAck: false });
            }
        });
    }
    handleRequest(queue, bindingKey, processFunction) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.channel) {
                yield this.channel.assertQueue(queue, { durable: true });
                console.log(`[...] Waiting for messages in queue: ${queue}, binding to key: ${bindingKey}`);
                yield this.channel.bindQueue(queue, this.exchange, bindingKey);
                this.channel.consume(queue, (msg) => __awaiter(this, void 0, void 0, function* () {
                    var _a, _b;
                    if (msg !== null) {
                        const requestData = JSON.parse(msg.content.toString());
                        let result;
                        let isError = false;
                        try {
                            result = processFunction(requestData);
                        }
                        catch (error) {
                            isError = true;
                            result = { msessage: error };
                        }
                        (_a = this.channel) === null || _a === void 0 ? void 0 : _a.sendToQueue(msg.properties.replyTo, Buffer.from(JSON.stringify(result)), {
                            correlationId: msg.properties.correlationId,
                            headers: { error: isError }
                        });
                        (_b = this.channel) === null || _b === void 0 ? void 0 : _b.ack(msg);
                    }
                }), { noAck: false });
            }
        });
    }
    generateUuid() {
        return Math.random().toString() + Math.random().toString() + Math.random().toString();
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            if (this.channel) {
                yield ((_a = this.channel) === null || _a === void 0 ? void 0 : _a.close());
                this.channel = null;
            }
            if (this.connection) {
                yield ((_b = this.connection) === null || _b === void 0 ? void 0 : _b.close());
                this.connection = null;
            }
        });
    }
}
RabbitMQ.instances = {};
exports.default = RabbitMQ;
