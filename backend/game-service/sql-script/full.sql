CREATE OR REPLACE FUNCTION FUNC_GET_ALL_GAMES()
RETURNS SETOF GAMECONFIG
LANGUAGE SQL
AS $$
    SELECT *
    FROM GAMECONFIG
	ORDER BY GAMEID ASC;
$$;



CREATE OR REPLACE FUNCTION FUNC_GET_GAME_BY_ID(P_GAMEID INTEGER)
RETURNS SETOF GAMECONFIG
LANGUAGE SQL
AS $$
    SELECT *
    FROM GAMECONFIG
	WHERE GAMEID = P_GAMEID;
$$;



CREATE OR REPLACE PROCEDURE SP_UPDATE_GAMECONFIG(
	P_GAMEID INTEGER,
	P_NAME VARCHAR,
	P_TYPE VARCHAR,
	P_ISEXCHANGE BOOLEAN,
	P_GUIDE VARCHAR
)
LANGUAGE SQL
AS $$
    UPDATE gameconfig
	SET
		NAME = P_NAME,
		TYPE = P_TYPE,
		ISEXCHANGE = P_ISEXCHANGE,
		GUIDE = P_GUIDE
	WHERE GAMEID = P_GAMEID;
$$;



CREATE OR REPLACE FUNCTION FUNC_GET_ALL_ITEMS_OF_GAME(P_EVENTID VARCHAR)
RETURNS SETOF GAMEITEM
LANGUAGE SQL
AS $$
    SELECT G.*
    FROM GAMEITEM G JOIN EVENTGAMECONFIG E
	ON G.GAMEID = E.GAMEID
	WHERE E.eventID = P_EVENTID
	ORDER BY G.ITEMID ASC;
$$;



CREATE OR REPLACE FUNCTION FUNC_GET_ITEM_OF_GAME_BY_ITEMID(
	P_ITEMID INTEGER
)
RETURNS SETOF GAMEITEM
LANGUAGE SQL
AS $$
    SELECT *
    FROM GAMEITEM
	WHERE ITEMID = P_ITEMID;
$$;



CREATE OR REPLACE PROCEDURE SP_ADD_EVENTGAMECONFIG(
	P_EVENTID VARCHAR,
	P_GAMEID INTEGER,
	P_PLAYTURN INTEGER
)
LANGUAGE SQL
AS $$
    INSERT INTO eventgameconfig (eventID, GAMEID, PLAYTURN) 
	VALUES (P_EVENTID, P_GAMEID, P_PLAYTURN);
$$;



CREATE OR REPLACE PROCEDURE SP_UPDATE_EVENTGAMECONFIG(
	P_EVENTID VARCHAR,
	P_GAMEID INTEGER,
	P_PLAYTURN INTEGER
)
LANGUAGE SQL
AS $$
    UPDATE eventgameconfig
	SET
		GAMEID = P_GAMEID,
		PLAYTURN = P_PLAYTURN
	WHERE eventID = P_EVENTID;
$$;



CREATE OR REPLACE FUNCTION FUNC_GET_EVENTGAME_BY_ID(P_EVENTID VARCHAR)
RETURNS SETOF EVENTGAMECONFIG
LANGUAGE SQL
AS $$
    SELECT *
    FROM EVENTGAMECONFIG
	WHERE eventID = P_EVENTID;
$$;



CREATE OR REPLACE PROCEDURE SP_ADD_PLAYLOG(
	P_CUSTOMERID INTEGER,
	P_EVENTID VARCHAR
)
LANGUAGE SQL
AS $$
    INSERT INTO PLAYLOG (CUSTOMERID, eventID, TIME) 
	VALUES (P_CUSTOMERID, P_EVENTID, NOW() AT TIME ZONE 'UTC-7');
$$;



CREATE OR REPLACE FUNCTION FUNC_GET_PLAYLOG_BY_CUSTOMERID(
	P_CUSTOMERID INTEGER,
	P_EVENTID VARCHAR
)
RETURNS SETOF PLAYLOG
LANGUAGE SQL
AS $$
    SELECT *
    FROM PLAYLOG
	WHERE CUSTOMERID = P_CUSTOMERID AND eventID = P_EVENTID
	ORDER BY TIME DESC;
$$;



CREATE OR REPLACE PROCEDURE SP_ADD_EVENTGAMEITEM(
	P_CUSTOMERID INTEGER,
	P_EVENTID VARCHAR,
	P_ITEMID INTEGER,
	P_QUANTITY INTEGER
)
LANGUAGE SQL
AS $$
    INSERT INTO EVENTGAMEITEM (CUSTOMERID, eventID, ITEMID, QUANTITY)
	VALUES (P_CUSTOMERID, P_EVENTID, P_ITEMID, P_QUANTITY);
$$;



CREATE OR REPLACE PROCEDURE SP_UPDATE_EVENTGAMEITEM_QUANTITY(
	P_CUSTOMERID INTEGER,
	P_EVENTID VARCHAR,
	P_ITEMID INTEGER,
	P_QUANTITY INTEGER
)
LANGUAGE SQL
AS $$
    UPDATE EVENTGAMEITEM
	SET 
		QUANTITY = P_QUANTITY
	WHERE 
		CUSTOMERID = P_CUSTOMERID
		AND eventID = P_EVENTID
		AND ITEMID = P_ITEMID;
$$;



CREATE OR REPLACE FUNCTION FUNC_GET_ALL_EVENTGAMEITEM_OF_CUSTOMER(
	P_CUSTOMERID INTEGER,
	P_EVENTID VARCHAR
)
RETURNS SETOF EVENTGAMEITEM
LANGUAGE SQL
AS $$
    SELECT *
    FROM EVENTGAMEITEM
	WHERE CUSTOMERID = P_CUSTOMERID AND eventID = P_EVENTID
	ORDER BY ITEMID ASC;
$$;



CREATE OR REPLACE FUNCTION FUNC_GET_EVENTGAMEITEM_BY_ITEMID(
	P_CUSTOMERID INTEGER, 
	P_EVENTID VARCHAR,
	P_ITEMID INTEGER
)
RETURNS SETOF EVENTGAMEITEM
LANGUAGE SQL
AS $$
    SELECT *
    FROM EVENTGAMEITEM
	WHERE CUSTOMERID = P_CUSTOMERID AND eventID = P_EVENTID AND ITEMID = P_ITEMID;
$$;



CREATE OR REPLACE PROCEDURE SP_ADD_EXCHANGELOG(
	P_CUSTOMERID INTEGER,
	P_EVENTID VARCHAR,
	P_ITEMID INTEGER,
	P_QUANTITY INTEGER,
	P_DESCRIPTION VARCHAR
)
LANGUAGE SQL
AS $$
    INSERT INTO EXCHANGELOG (CUSTOMERID, eventID, TIMEEXCHANGE, ITEMID, QUANTITY, DESCRIPTION)
	VALUES (P_CUSTOMERID, P_EVENTID, NOW() AT TIME ZONE 'UTC-7', P_ITEMID, P_QUANTITY, P_DESCRIPTION);
$$;



CREATE OR REPLACE FUNCTION FUNC_GET_ALL_EXCHANGELOG_OF_CUSTOMER(
	P_CUSTOMERID INTEGER,
	P_EVENTID VARCHAR
)
RETURNS SETOF EXCHANGELOG
LANGUAGE SQL
AS $$
    SELECT *
    FROM EXCHANGELOG
	WHERE CUSTOMERID = P_CUSTOMERID AND eventID = P_EVENTID
	ORDER BY TIMEEXCHANGE DESC;
$$;